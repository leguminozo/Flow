import { Alert, Platform } from 'react-native';
import * as Notifications from 'expo-notifications';
import { SchedulableTriggerInputTypes } from 'expo-notifications';
import { supabase } from '@/lib/supabase';

// Configurar notificaciones
Notifications.setNotificationHandler({
  handleNotification: async () => ({
    shouldShowAlert: true,
    shouldPlaySound: true,
    shouldSetBadge: true,
    shouldShowBanner: true,
    shouldShowList: true,
  }),
});

export interface NotificationData {
  id: string;
  title: string;
  body: string;
  data?: any;
  type: 'delivery' | 'subscription' | 'payment' | 'reminder' | 'system';
  priority: 'high' | 'normal' | 'low';
  scheduledFor?: Date;
}

class NotificationService {
  private expoPushToken: string | null = null;

  /**
   * Solicitar permisos de notificaci√≥n
   */
  async requestPermissions(): Promise<boolean> {
    try {
      const { status: existingStatus } = await Notifications.getPermissionsAsync();
      let finalStatus = existingStatus;

      if (existingStatus !== 'granted') {
        const { status } = await Notifications.requestPermissionsAsync();
        finalStatus = status;
      }

      if (finalStatus !== 'granted') {
        console.log('‚ùå Permisos de notificaci√≥n no otorgados');
        return false;
      }

      console.log('‚úÖ Permisos de notificaci√≥n otorgados');
      return true;
    } catch (error) {
      console.error('Error solicitando permisos:', error);
      return false;
    }
  }

  /**
   * Obtener token de notificaci√≥n
   */
  async getPushToken(): Promise<string | null> {
    try {
      if (!this.expoPushToken) {
        const token = await Notifications.getExpoPushTokenAsync({
          projectId: process.env.EXPO_PUBLIC_PROJECT_ID,
        });
        this.expoPushToken = token.data;
        console.log('üì± Token de notificaci√≥n obtenido:', this.expoPushToken);
      }
      return this.expoPushToken;
    } catch (error) {
      console.error('Error obteniendo token:', error);
      return null;
    }
  }

  /**
   * Enviar notificaci√≥n local inmediata
   */
  async sendLocalNotification(notification: Omit<NotificationData, 'id'>): Promise<string> {
    try {
      const notificationId = await Notifications.scheduleNotificationAsync({
        content: {
          title: notification.title,
          body: notification.body,
          data: notification.data || {},
          sound: 'default',
          priority: notification.priority,
        },
        trigger: null, // Env√≠o inmediato
      });

      console.log('üì® Notificaci√≥n local enviada:', notificationId);
      return notificationId;
    } catch (error) {
      console.error('Error enviando notificaci√≥n local:', error);
      throw error;
    }
  }

  /**
   * Programar notificaci√≥n local
   */
  async scheduleLocalNotification(notification: Omit<NotificationData, 'id'>, scheduledFor: Date): Promise<string> {
    try {
      const notificationId = await Notifications.scheduleNotificationAsync({
        content: {
          title: notification.title,
          body: notification.body,
          data: notification.data || {},
          sound: 'default',
          priority: notification.priority,
        },
        trigger: {
          type: SchedulableTriggerInputTypes.TIME_INTERVAL,
          seconds: Math.floor((scheduledFor.getTime() - Date.now()) / 1000),
        },
      });

      console.log('‚è∞ Notificaci√≥n programada:', notificationId, 'para:', scheduledFor);
      return notificationId;
    } catch (error) {
      console.error('Error programando notificaci√≥n:', error);
      throw error;
    }
  }

  /**
   * Cancelar notificaci√≥n programada
   */
  async cancelNotification(notificationId: string): Promise<void> {
    try {
      await Notifications.cancelScheduledNotificationAsync(notificationId);
      console.log('‚ùå Notificaci√≥n cancelada:', notificationId);
    } catch (error) {
      console.error('Error cancelando notificaci√≥n:', error);
    }
  }

  /**
   * Cancelar todas las notificaciones programadas
   */
  async cancelAllNotifications(): Promise<void> {
    try {
      await Notifications.cancelAllScheduledNotificationsAsync();
      console.log('‚ùå Todas las notificaciones canceladas');
    } catch (error) {
      console.error('Error cancelando todas las notificaciones:', error);
    }
  }

  /**
   * Enviar notificaci√≥n de entrega
   */
  async sendDeliveryNotification(orderId: string, estimatedTime: string): Promise<void> {
    const notification: Omit<NotificationData, 'id'> = {
      title: 'üöö Tu pedido est√° en camino',
      body: `Tu entrega llegar√° en aproximadamente ${estimatedTime}`,
      type: 'delivery',
      priority: 'high',
      data: { orderId, type: 'delivery' },
    };

    await this.sendLocalNotification(notification);
  }

  /**
   * Enviar notificaci√≥n de suscripci√≥n
   */
  async sendSubscriptionNotification(subscriptionName: string, nextDelivery: string): Promise<void> {
    const notification: Omit<NotificationData, 'id'> = {
      title: 'üì¶ Pr√≥xima entrega programada',
      body: `Tu suscripci√≥n "${subscriptionName}" se entregar√° el ${nextDelivery}`,
      type: 'subscription',
      priority: 'normal',
      data: { subscriptionName, nextDelivery, type: 'subscription' },
    };

    await this.sendLocalNotification(notification);
  }

  /**
   * Enviar notificaci√≥n de pago
   */
  async sendPaymentNotification(amount: number, planName: string): Promise<void> {
    const notification: Omit<NotificationData, 'id'> = {
      title: 'üí≥ Pago procesado exitosamente',
      body: `Se ha cobrado $${amount.toLocaleString('es-CL')} por tu plan ${planName}`,
      type: 'payment',
      priority: 'normal',
      data: { amount, planName, type: 'payment' },
    };

    await this.sendLocalNotification(notification);
  }

  /**
   * Enviar recordatorio de automatizaci√≥n
   */
  async sendAutomationReminder(automationName: string, daysUntilDelivery: number): Promise<void> {
    const notification: Omit<NotificationData, 'id'> = {
      title: '‚è∞ Recordatorio de automatizaci√≥n',
      body: `Tu automatizaci√≥n "${automationName}" se entregar√° en ${daysUntilDelivery} d√≠as`,
      type: 'reminder',
      priority: 'normal',
      data: { automationName, daysUntilDelivery, type: 'reminder' },
    };

    await this.sendLocalNotification(notification);
  }

  /**
   * Programar recordatorio de entrega
   */
  async scheduleDeliveryReminder(orderId: string, deliveryDate: Date, hoursBefore: number = 2): Promise<string> {
    const reminderDate = new Date(deliveryDate.getTime() - (hoursBefore * 60 * 60 * 1000));
    
    const notification: Omit<NotificationData, 'id'> = {
      title: 'üì¶ Tu entrega llegar√° pronto',
      body: `Tu pedido llegar√° en ${hoursBefore} horas. ¬°Prep√°rate!`,
      type: 'delivery',
      priority: 'high',
      data: { orderId, type: 'delivery_reminder' },
    };

    return await this.scheduleLocalNotification(notification, reminderDate);
  }

  /**
   * Programar recordatorio de suscripci√≥n
   */
  async scheduleSubscriptionReminder(subscriptionName: string, deliveryDate: Date, daysBefore: number = 1): Promise<string> {
    const reminderDate = new Date(deliveryDate.getTime() - (daysBefore * 24 * 60 * 60 * 1000));
    
    const notification: Omit<NotificationData, 'id'> = {
      title: 'üìÖ Recordatorio de suscripci√≥n',
      body: `Tu suscripci√≥n "${subscriptionName}" se entregar√° ma√±ana`,
      type: 'subscription',
      priority: 'normal',
      data: { subscriptionName, type: 'subscription_reminder' },
    };

    return await this.scheduleLocalNotification(notification, reminderDate);
  }

  /**
   * Mostrar alerta de confirmaci√≥n
   */
  showConfirmationAlert(
    title: string,
    message: string,
    onConfirm: () => void,
    onCancel?: () => void
  ): void {
    Alert.alert(
      title,
      message,
      [
        {
          text: 'Cancelar',
          style: 'cancel',
          onPress: onCancel,
        },
        {
          text: 'Confirmar',
          style: 'destructive',
          onPress: onConfirm,
        },
      ],
      { cancelable: false }
    );
  }

  /**
   * Mostrar alerta de √©xito
   */
  showSuccessAlert(title: string, message: string, onPress?: () => void): void {
    Alert.alert(
      `‚úÖ ${title}`,
      message,
      [{ text: 'Perfecto', onPress }]
    );
  }

  /**
   * Mostrar alerta de error
   */
  showErrorAlert(title: string, message: string, onPress?: () => void): void {
    Alert.alert(
      `‚ùå ${title}`,
      message,
      [{ text: 'Entendido', onPress }]
    );
  }

  /**
   * Mostrar alerta de informaci√≥n
   */
  showInfoAlert(title: string, message: string, onPress?: () => void): void {
    Alert.alert(
      `‚ÑπÔ∏è ${title}`,
      message,
      [{ text: 'OK', onPress }]
    );
  }

  /**
   * Configurar listener para notificaciones recibidas
   */
  setupNotificationListener(onNotificationReceived: (notification: any) => void): () => void {
    const subscription = Notifications.addNotificationReceivedListener(onNotificationReceived);
    return () => subscription.remove();
  }

  /**
   * Configurar listener para notificaciones respondidas
   */
  setupNotificationResponseListener(onNotificationResponse: (response: any) => void): () => void {
    const subscription = Notifications.addNotificationResponseReceivedListener(onNotificationResponse);
    return () => subscription.remove();
  }

  /**
   * Obtener notificaciones no le√≠das
   */
  async getUnreadNotifications(): Promise<any[]> {
    try {
      const { data, error } = await supabase
        .from('notifications')
        .select('*')
        .eq('read', false)
        .order('created_at', { ascending: false });

      if (error) {
        console.error('Error obteniendo notificaciones:', error);
        return [];
      }

      return data || [];
    } catch (error) {
      console.error('Error obteniendo notificaciones:', error);
      return [];
    }
  }

  /**
   * Marcar notificaci√≥n como le√≠da
   */
  async markNotificationAsRead(notificationId: string): Promise<void> {
    try {
      const { error } = await supabase
        .from('notifications')
        .update({ read: true })
        .eq('id', notificationId);

      if (error) {
        console.error('Error marcando notificaci√≥n como le√≠da:', error);
      }
    } catch (error) {
      console.error('Error marcando notificaci√≥n como le√≠da:', error);
    }
  }

  /**
   * Obtener configuraci√≥n de notificaciones del usuario
   */
  async getUserNotificationSettings(userId: string): Promise<any> {
    try {
      const { data, error } = await supabase
        .from('user_notification_settings')
        .select('*')
        .eq('user_id', userId)
        .single();

      if (error) {
        console.error('Error obteniendo configuraci√≥n de notificaciones:', error);
        return null;
      }

      return data;
    } catch (error) {
      console.error('Error obteniendo configuraci√≥n de notificaciones:', error);
      return null;
    }
  }

  /**
   * Actualizar configuraci√≥n de notificaciones del usuario
   */
  async updateUserNotificationSettings(userId: string, settings: any): Promise<void> {
    try {
      const { error } = await supabase
        .from('user_notification_settings')
        .upsert({
          user_id: userId,
          ...settings,
        });

      if (error) {
        console.error('Error actualizando configuraci√≥n de notificaciones:', error);
      }
    } catch (error) {
      console.error('Error actualizando configuraci√≥n de notificaciones:', error);
    }
  }
}

export const notificationService = new NotificationService(); 